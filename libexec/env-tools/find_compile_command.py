#!/usr/bin/env python3

import argparse
import json
import os
import shlex

def get_args():
    p = argparse.ArgumentParser(description="From a compile_commands.json file generated by CMake, get a list of include directories specified in said commands by -I -isystem or -isysroot and search for a file whose name matches NEEDLE.  The search may be restricted to the include dirs from the compile command of a single file using the --file option.")
    p.add_argument("--ccj", dest="compile_commands_file", help="Path to 'compile_commands.json' file generated by CMake")
    p.add_argument("--needle", help="Search for a file in include dirs of compile command for all files or file specified with the --file option")
    p.add_argument("--file", help="Restrict to compile command of one file")
    return p.parse_args()

def main():
    args = get_args()
    for r in find(args.compile_commands_file, args.needle, args.file):
        print(r)


def get_include_dirs(compile_commands_file, file=None):
    with open(compile_commands_file) as f:
        d = json.load(f)
    if file is not None:
        command = find_compile_command(d, file)
        args = parse_compile_command(o['command'])
        yield from map(lambda d: {"dir":d, "file": file}, args.include_dirs)
    else:
        for o in d:
            args = parse_compile_command(o['command'])
            yield from map(lambda d: {"dir":d, "file": file}, args.include_dirs)

#
# Compile commands dict is a list of objects of the form
# {"file": <filename>, "command": <command>, "directory": <directory>}
def find_compile_command(d, file):
    for o in d:
        if file in o['file']:
            return o['command']

def find(compile_commands_file, needle, file=None):
    dirs = get_include_dirs(compile_commands_file, file)
    for d in dirs:
        content = os.listdir(d['dir'])
        if needle in content:
            d['needle'] = needle
            yield d


def parse_compile_command(compile_command):
    compile_command_parser = argparse.ArgumentParser()
    compile_command_parser.add_argument("-I", "-isystem", dest="include_dirs", action='append')
    argv = shlex.split(compile_command)
    args, unknown = compile_command_parser.parse_known_args(argv)
    return args

# string = "cd /home/phc001/Repositories/gitlab.science.gc.ca/RPN-SI/iris/build/test && /fs/ssm/main/opt/intelcomp/inteloneapi-2022.1.2/intelcomp+mpi+mkl/all/bin/icc -DHAVE_APP=\"0.1.0\" -DHAVE_GEOREF=\"0.1.0\" -DHAVE_MPI -DHAVE_OPENMP -DHAVE_RMN=\"20.0.0-alpha6\" -DLittle_Endian -DMODEL_NAME=\"OCEAN\" -DMODEL_VAR_CONSUME=\"TT\" -DMODEL_VAR_PROVIDE=\"ST\" -I/home/phc001/Repositories/gitlab.science.gc.ca/RPN-SI/iris/build -I/home/phc001/Repositories/gitlab.science.gc.ca/RPN-SI/iris/test/src/../../src -I/home/phc001/Repositories/gitlab.science.gc.ca/RPN-SI/iris/build/src -isystem /fs/homeu2/eccc/mrd/ords/rpnsi/sici000/ci_package/ssm/staging/master/rmn_20.0.0-alpha6-inteloneapi-2022.1.2_rhel-8-icelake-64/include -isystem /home/phc001/Repositories/gitlab.science.gc.ca/RPN-SI/libgeoref/localinstall/include -fp-model precise -traceback -Wtrigraphs -xICELAKE-SERVER -ldl -pthread -g -ftrapuv -qopenmp -std=c99 -MD -MT test/CMakeFiles/mdl1.dir/mdl1.c.o -MF CMakeFiles/mdl1.dir/mdl1.c.o.d -o CMakeFiles/mdl1.dir/mdl1.c.o -c /home/phc001/Repositories/gitlab.science.gc.ca/RPN-SI/iris/test/src/mdl1.c"
# 
# args = parse_compile_command(string)
# 
# print(args.include_dirs)
main()
